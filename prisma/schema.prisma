// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Brand {
  id       String    @id @default(cuid())
  name     String    @unique
  logo     String?
  website  String?
  products Product[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  displayName String
  description String?
  icon        String?
  products    Product[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Color {
  id      String @id @default(cuid())
  name    String
  code    String @unique
  hex     String
  
  productVariants ProductVariant[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String @id @default(cuid())
  sku         String @unique
  name        String
  description String?
  type        ProductType
  
  // Relationships
  brand       Brand    @relation(fields: [brandId], references: [id])
  brandId     String
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  
  // Product details
  dimensions  String?
  weight      String?
  material    String?
  specs       Json?
  
  // Pricing
  cost        Decimal?
  price       Decimal
  
  // Images and URLs
  imageMain   String?
  images      String[]
  productUrl  String?
  
  // Variants (for colors, sizes, etc.)
  variants    ProductVariant[]
  
  // Package associations
  packageItems PackageItem[]
  
  // Metadata
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([brandId])
  @@index([categoryId])
  @@index([type])
}

model ProductVariant {
  id        String @id @default(cuid())
  
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  
  // Variant details
  sku       String  @unique
  name      String?
  
  // Color variant
  color     Color?  @relation(fields: [colorId], references: [id])
  colorId   String?
  
  // Size/dimension variants
  size      String?
  dimensions String?
  
  // Pricing overrides
  cost      Decimal?
  price     Decimal?
  
  // Images specific to this variant
  imageMain String?
  images    String[]
  
  // URL specific to this variant
  productUrl String?
  
  // Stock and availability
  isAvailable Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([productId])
  @@index([colorId])
}

model Package {
  id          String @id @default(cuid())
  name        String @unique
  description String
  category    String
  vision      String?
  
  // Images
  imageMain   String
  image01     String?
  image02     String?
  image03     String?
  
  // Package items
  items       PackageItem[]
  
  // Metadata
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PackageItem {
  id        String @id @default(cuid())
  
  package   Package @relation(fields: [packageId], references: [id], onDelete: Cascade)
  packageId String
  
  product   Product @relation(fields: [productId], references: [id])
  productId String
  
  // Item type in package (floorTile, vanity, etc.)
  itemType  String
  quantity  Int     @default(1)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([packageId, itemType])
  @@index([packageId])
  @@index([productId])
}

enum ProductType {
  TILE_FLOOR
  TILE_WALL
  TILE_SHOWER_FLOOR
  TILE_ACCENT
  VANITY
  TUB
  TUB_FILLER
  TOILET
  SHOWER
  FAUCET
  GLAZING
  MIRROR
  TOWEL_BAR
  TOILET_PAPER_HOLDER
  HOOK
  LIGHTING
}